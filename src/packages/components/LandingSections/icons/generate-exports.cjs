/* eslint-disable no-undef */
/* eslint-disable @typescript-eslint/no-var-requires */

const fs = require('fs');
const path = require('path');

const capitalizeFirstLetter = (word) => {
  return word.slice(0, 1).toUpperCase() + word.slice(1);
};

const iconsFolder = '../../../icons/';
const acceptExtensions = ['svg'];
const foldersToParse = ['one-tone', 'two-tone'];
const defaultNamespace = 'one-tone';
const exportObjectName = 'iconBase';

const dashToCamelCase = (str, isUpperCamelCase) => {
  return str
    .split('-')
    .map((word, idx) =>
      idx > 0 || isUpperCamelCase ? capitalizeFirstLetter(word) : word
    )
    .join('');
};

const writeFile = (filename, content) => {
  fs.writeFileSync(`./${filename}.tsx`, content);
};

const filePrefix =
  [
    "/* AUTOGENERATED. DON'T MODIFY! ",
    "   Run 'node generate-exports.js' inside this folder to update exports",
    '*/\n',
    '/* eslint-disable quotes */',
    // '/* eslint-disable prettier/prettier */',
    '/* prettier-ignore  */',
    '/* eslint-disable @typescript-eslint/no-unused-vars */',
    // '/* eslint-disable unused-imports/no-unused-imports */',
    "import React from 'react'",
  ].join('\n') + '\n\n';

const getIconsData = (directoryName) => {
  const filenames = fs.readdirSync(
    path.join(__dirname, iconsFolder, directoryName)
  );
  const clearFilenames = filenames.filter((name) => {
    if (acceptExtensions.findIndex((i) => name.endsWith(`.${i}`)) !== -1) {
      return true;
    }
  });
  const prefix =
    directoryName === defaultNamespace
      ? ''
      : dashToCamelCase(directoryName, true);

  const iconsData = clearFilenames.map((name) => {
    const iconName =
      dashToCamelCase(name.split('.').slice(0, -1).join('.')) + prefix;
    const componentName = `<${dashToCamelCase(iconName, true)} />`;
    const pathToIcon = `/${directoryName}/${name}`;
    console.log(pathToIcon);
    return {
      iconName,
      componentName,
      pathToIcon,
    };
  });

  return iconsData;
};

const createImports = (iconsData) => {
  return iconsData
    .map(
      (icon) =>
        `import {ReactComponent as ${dashToCamelCase(
          icon.iconName,
          true
        )}} from '${iconsFolder}${icon.pathToIcon}'`
    )
    .join('\n');
};

const createExports = (iconsData) => {
  const prefix = `export const ${exportObjectName} = {\n`;
  const postfix = '\n}';
  const exportData = iconsData
    .map((icon) => `  ${icon.iconName}: ${icon.componentName},`)
    .join('\n');
  return prefix + exportData + postfix;
};

const run = () => {
  const iconsData = foldersToParse
    .map((folderName) => {
      return getIconsData(folderName);
    })
    .flat();

  const imports = createImports(iconsData);
  const exports = createExports(iconsData);
  const output = `${filePrefix}${imports}\n\n${exports}\n`;
  writeFile('index', output);
};

run();
